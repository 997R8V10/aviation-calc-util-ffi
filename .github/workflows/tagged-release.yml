name: Tagged Release

on:
  push:
    tags: [ "v*" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test
        run: cargo test --verbose
  build:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, x86, arm64]
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: macos-latest
            short-os: osx
            rust-os: apple-darwin
          - os: windows-latest
            short-os: win
            rust-os: pc-windows-msvc
          - os: ubuntu-latest
            short-os: linux
            rust-os: unknown-linux-gnu
          - arch: x86
            rust-arch: i686
          - arch: x64
            rust-arch: x86_64
          - arch: arm64
            rust-arch: aarch64
          # - arch: arm
          #   os: ubuntu-latest
          #   short-os: linux
          #   rust-os: unknown-linux-gnu-gnueabihf
          #   rust-arch: armv7
          - os: ubuntu-latest
            arch: x64
            copy-nuget-defs: True
        exclude:
          - os: macos-latest
            arch: x86
          - os: ubuntu-latest
            arch: x86
          - os: ubuntu-latest
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Download Rust Target
      shell: pwsh
      run: |
        rustup target add ${{ matrix.rust-arch }}-${{ matrix.rust-os }}
    - name: Install Linux Arm Tools
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'arm' }}
      run: |
        dpkg --add-architecture armhf
        apt-get update
        apt-get install -y curl git build-essential
        apt-get install -y libc6-armhf-cross libc6-dev-armhf-cross gcc-arm-linux-gnueabihf
        export PKG_CONFIG_PATH="/usr/lib/arm-linux-gnueabihf/pkgconfig"
        export PKG_CONFIG_ALLOW_CROSS="true"
    - name: Install Linux Arm64 Tools
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64' }}
      run: |
        sudo apt install aarch64-linux-gnu-gcc -y
    - name: Build
      shell: pwsh
      run: cargo build --verbose --target-dir ${{ github.workspace }}/out/build --target ${{ matrix.rust-arch }}-${{ matrix.rust-os }} -r --config "env.NUGET_DEFS_OUTPUT='${{ github.workspace }}/out/build/nugetinfo'"
    - name: Copy Binaries to NuGet folder
      shell: pwsh
      run: |
        New-Item -ItemType Directory '${{ github.workspace }}/out/nuget/runtimes/${{ matrix.short-os}}-${{ matrix.arch }}'
        Copy-Item -Path "${{ github.workspace }}/out/build/${{ matrix.rust-arch }}-${{ matrix.rust-os }}/release/*" -Destination "${{ github.workspace }}/out/nuget/runtimes/${{ matrix.short-os}}-${{ matrix.arch }}" -Include *.dll,*.pdb,*.so*,*.dylib*
    - name: Copy NuGet Defs
      if: ${{ matrix.copy-nuget-defs }}
      shell: pwsh
      run: |
        New-Item -ItemType Directory '${{ github.workspace }}/out/nuget/build'
        Get-ChildItem -Path ${{ github.workspace }}/out/build/nugetinfo | Copy-Item -Destination ${{ github.workspace }}/out/nuget -Recurse -Container -Force
    - name: Archive NuGet Files
      if: ${{ matrix.create-nuget-package }}
      uses: actions/upload-artifact@v3
      with:
        name: AviationCalcUtilNet-NuGet
        retention-days: 1
        path: |
          ${{ github.workspace }}/out/nuget/*

  upload-nuget-package:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: nuget/setup-nuget@v1
        with:
          nuget-version: 'latest'
      - name: Download NuGet Packages Contents
        uses: actions/download-artifact@v3
        with:
          name: AviationCalcUtilNet-NuGet
          path: ${{ github.workspace }}/nuget
      - name: Create NuGet Package
        run: |
          cd ${{ github.workspace }}/nuget
          nuget pack .
      - name: Upload NuGet Package
        run: |
          cd ${{ github.workspace }}/nuget
          nuget push *.nupkg -Source 'https://api.nuget.org/v3/index.json' -ApiKey ${{secrets.NUGET_API_KEY}}
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: AviationCalcUtilNet-NuGet
          failOnError: false

  create-github-release:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
    runs-on: ubuntu-latest
    needs: upload-nuget-package
    steps:
      - uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false