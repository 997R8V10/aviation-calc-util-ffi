name: Tagged Release

on:
  push:
    tags: [ "v*" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Test
        run: cargo test --verbose
  build:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
        short-os: [win, osx, linux]
        include:
          - short-os: osx
            os: macos-latest
            rust-os: apple-darwin
          - short-os: win
            os: windows-latest
            rust-os: pc-windows-msvc
          - short-os: linux
            os: ubuntu-24.04
            rust-os: unknown-linux-gnu
          - arch: x64
            rust-arch: x86_64
          - arch: arm64
            rust-arch: aarch64
          - short-os: linux
            arch: x64
            copy-nuget-defs: True
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            ./ -> target
      - name: Download Rust Target
        shell: pwsh
        run: |
          rustup target add ${{ matrix.rust-arch }}-${{ matrix.rust-os }}
      - name: Install Linux Arm64 Tools
        if: ${{ matrix.short-os == 'linux' && matrix.arch == 'arm64' }}
        run: |
          sudo apt-get install gcc-aarch64-linux-gnu -y
      - name: Build
        shell: pwsh
        run: cargo build --verbose --target-dir ${{ github.workspace }}/out/build --target ${{ matrix.rust-arch }}-${{ matrix.rust-os }} -r --config "env.NUGET_DEFS_OUTPUT='${{ github.workspace }}/out/build/nugetinfo'"
      - name: Copy Binaries to NuGet folder
        shell: pwsh
        run: |
          New-Item -ItemType Directory '${{ github.workspace }}/out/nuget/runtimes/${{ matrix.short-os}}-${{ matrix.arch }}'
          Copy-Item -Path "${{ github.workspace }}/out/build/${{ matrix.rust-arch }}-${{ matrix.rust-os }}/release/*" -Destination "${{ github.workspace }}/out/nuget/runtimes/${{ matrix.short-os}}-${{ matrix.arch }}" -Include *.dll,*.pdb,*.so*,*.dylib*
      - name: Copy NuGet Defs
        if: ${{ matrix.copy-nuget-defs }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory '${{ github.workspace }}/out/nuget/build'
          Get-ChildItem -Path ${{ github.workspace }}/out/build/nugetinfo | Copy-Item -Destination ${{ github.workspace }}/out/nuget -Recurse -Container -Force
      - name: Archive NuGet Files
        uses: actions/upload-artifact@v4
        with:
          name: AviationCalcUtilNet-NuGet-${{ matrix.short-os }}-${{  matrix.arch }}
          retention-days: 1
          path: |
            ${{ github.workspace }}/out/nuget/*

  upload-nuget-package:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - uses: nuget/setup-nuget@v1
        with:
          nuget-version: 'latest'
      - name: Download NuGet Packages Contents
        uses: actions/download-artifact@v4
        with:
          pattern: AviationCalcUtilNet-NuGet*
          merge-multiple: true
          path: ${{ github.workspace }}/nuget
      - name: Create NuGet Package
        run: |
          cd ${{ github.workspace }}/nuget
          nuget pack .
      - name: Upload NuGet Package
        run: |
          cd ${{ github.workspace }}/nuget
          nuget push *.nupkg -Source 'https://api.nuget.org/v3/index.json' -ApiKey ${{secrets.NUGET_API_KEY}}

  create-github-release:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
    runs-on: ubuntu-24.04
    needs: upload-nuget-package
    steps:
      - uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false